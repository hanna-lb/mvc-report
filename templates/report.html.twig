{# templates/report.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Rapporter{% endblock %}

{% block content %}
<h1>Rapporter</h1>

<article>
<h2>Kmom01</h2>
<p>
    Jag har viss erfarenhet av objektorienterad programmering sedan innan, dels från tidigare studier, dels från arbetslivserfarenhet. 
    Detta då jag läst två kurser i Java redan på gymnasiet samt en kurs i Java på universitetsnivå när jag tog min kandidatexamen. 
    Därefter har jag jobbat en del objektorienterat med python (där jag lärt mig på jobbet). Sedan nu under detta läsår har läst färdigt 
    en kurs i C# samt läser parallellt med denna kurs en fördjupningskurs i C#. Sedan skulle jag även vilja påstå att föregående kurs i 
    kurspaketet om databaser och javascript rörde på ytan av objektorientering.
</p>
<p>
    Inom PHP finns objekt och klasser. Ett objekt skapas utifrån en klass och detta objekt har olika attribut och metoder, där klassen är mallen för detta. 
    Det är i klassen som man definierar vilka attribut (variabler/properties) och metoder som objekt ska ha, det vill säga man sätter strukturen. 
    Metoderna är vad man kan nå utifrån för att bland annat ändra på olika värden på attribut i objektet. Objekt i sig är en instans av en klass, 
    och objektet instansieras i konstruktor-klassen i koden. 
</p>
<p>
    När jag började göra denna rapportsida var jag minst sagt förvirrad över kodstrukturen som används. Det krävdes en hel del komplettering 
    med googling och läsning av symfonys egna dokumentation för att greppa lite bättre vad som gör vad. Exempelvis behövde jag läsa lite mer på djupet hur 
    routing fungerar med annotering, då jag inte greppade först hur det fungerade. Jag vet ännu inte vad alla filer spelar för roll, och det krävdes trial and error 
    för att hitta vilken sökväg som ska användas för t.ex. css. Dessutom uppstod viss förvirring då dokumentationen för symfony och twig för vyer skiljer sig från hur 
    vi jobbade med twig i designkursen, där vi enligt symfony helst ska nyttja funktionaliteten för block. Det är åtminstone så jag tolkade det utifrån det faktum att 
    vi genererade en base.html.twig, vars syfte jag inte förstod alls förrän jag kollade symfony twig-dokumentationen.
</p>
<p>
    I och med att vi ännu inte har hunnit nyttja särdeles mycket PHP i kursen kan jag inte påstå att jag använt mig utav "PHP The Right Way" särskilt mycket ännu, 
    annat än att ögna igenom det i viss mån. Det känns som att det kommer vara mer relevant i kommande delar av kursen. Däremot tycker jag det ska bli spännande att 
    jobbat med enhetstestning, då det är något jag inte gjort särdeles mycket förut. Sedan känns kapitlet om databasinteraktion relevant, då det ger mig ännu bättre 
    förståelse varför vi separerade koden i databaskursen annat än för "bara" läsbarhetens skull.
</p>
<p>
    Då detta moment har repeterat nyttjandet av vyer och kontrollers på ytterligare ett sätt skulle jag vilja påstå att det också är mitt TIL utöver databasinteraktion,
     i och med att jag nu börjar förstå koncepten desto bättre. 
</p>

</article>

<article>
<h2>Kmom02</h2>
<p>
    I föregående moment beskrev jag klasser och objekt. I denna uppgift började vi gräva ned oss lite djupare med arv, komposition, interface och trait. Arv är en 
    förlängning av en klass. För att exemplifiera detta med koden jag jobbat med så har jag en klass Deck för en kortlek och en klass DeckWithJoker som har sin grund i 
    den vanliga kortleken, men där har jag även lagt till kod som lägger till två joker-kort i kortleken. Därmed ärver DeckWithJoker sina properties och metoder från Deck, 
    och inom objektorienterad programmering benämns de som förälder (Deck) och barn (DeckWithJoker). På detta vis kan man återanvända övergripande kod. Komposition handlar 
    om kopplingen mellan objekt och att objektet kan existera utan det andra objektet. I mitt fall kan en kortlek existera utan kort, och korten kan existera även om det 
    inte finns en kortlek, vilket istället är ett exempel på en aggregation. Istället kan ett exempel på en komposition vara en ett spel och en session. Spelet 
    kan inte existera utanför sessionen. När det kommer till interface kan man säga att det utgör en mall för beteenden av klasser. Den kan återanvändas av flera klasser. 
    Det är inget jag använt mig utav, men jag ser fortfarande nyttan i det. En klass kan implementera ett interface, och i interface kan vi namnge funktioner vi säger ska 
    existera i klassen. Själva beteendet sätter vi däremot i respektive klass för den funktionen. Har vi ett interface med tre funktioner specificerade i sig och den 
    implementeras i olika klasser, då måste alla klasserna med det interfacet har samtliga tre funktioner i sig. Trait är inte heller något jag använt mig utav ännu, 
    men är ett sätt att återanvända kod utöver arv. Detta då klasser inte kan ärva från flera olika klasser samtidigt. Jag gillar exemplet som ges där man använder traits 
    för att konstruera ett histogram för ett spel. Skulle jag göra flera spel där jag vill lagra olika high scores för samtliga spel är det rimligt att jag gör den koden 
    återanvändbar, och där hade traits kunnat vara lämpligt.
</p>
<p>
    Jag tyckte uppgiften inte var helt lätt att lösa och framförallt väldigt maffig. Jag har inte byggt något spel ännu, men byggde upp klasser för kort, kortlek, kortlek 
    med joker som ärver kortlek, samt en klass för spelare. En kortlek byggs upp av kort-objekt. En spelare är egentligen en hand med kort, där ett spelar-objekt skapas med 
    en array av kort. Det är för att kunna ha flera instanser av utdelade kort parallellt med en kortlek som vi tagit korten från. Redan här har jag märkt att jag kan 
    förbättra min kod genom att göra den mer återanvändningsbar. Jag ser fram emot att bryta ut delar av kod som lämpar sig för att återanvändas. Jag måste säga att jag ändå 
    är nöjd med hur jag genererat mina kort i CSS. Utseendet styrs med css utifrån vad för värde och svit som kortet har, vilket är värden vi får från php-koden. Ärligt har 
    jag nog lagt för mycket tid bara på att få det att se vettigt ut, men samtidigt är det roligt när det konkret synliga växer fram.
</p>
<p>
    Min TIL detta moment är att jag har lärt mig mer hur PHP struktureras och fungerar samt hur man hanterar återanvändning av kod på olika sätt. Jag har också fått brottas 
    rätt duktigt att få ut värderna från de nestlade arrayerna, men jag tror det börjar klicka nu.
</p>
</article>

<article>
<h2>Kmom03</h2>
<p>Redovisningstext</p>
</article>

<article>
<h2>Kmom04</h2>
<p>Redovisningstext</p>
</article>

<article>
<h2>Kmom05</h2>
<p>Redovisningstext</p>
</article>

<article>
<h2>Kmom06</h2>
<p>Redovisningstext</p>
</article>

<article>
<h2>Kmom07/10</h2>
<p>Redovisningstext</p>
</article>

{% endblock %}
